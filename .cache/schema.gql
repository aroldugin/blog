### Type definitions saved at 2022-07-13T17:54:41.722Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    
    """
    width: Int

    """
    
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    
    """
    aspectRatio: Float

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
  author: String
  url: String
  siteUrl: String
  image: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

type MarkdownHeading {
  id: String
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: []) @dontInfer

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean
  duotone: DuotoneGradient
  rotate: Int
  trim: Float
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat, toFormatBase64: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat
    toFormatBase64: ImageFormat
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int
    trim: Float
    sizes: String

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): GatsbyImageData!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, base64: Boolean, traceSVG: Potrace, toFormat: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpResize
}

interface WpNode {
  """The globally unique ID for the object"""
  id: ID!
}

interface WpContentNode implements Node {
  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The ID of the node in the database."""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

interface WpUniformResourceIdentifiable {
  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The unique resource identifier path"""
  uri: String
}

"""Connection between the ContentNode type and the ContentType type"""
type WpContentNodeToContentTypeConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpContentType
}

"""An Post Type object"""
type WpContentType implements Node & WpNode & WpUniformResourceIdentifiable @dontInfer {
  """
  The url path of the first page of the archive page for this content type.
  """
  archivePath: String

  """Whether this content type should can be exported."""
  canExport: Boolean

  """Connection between the ContentType type and the Taxonomy type"""
  connectedTaxonomies: WpContentTypeToTaxonomyConnection

  """Connection between the ContentType type and the ContentNode type"""
  contentNodes: WpContentTypeToContentNodeConnection

  """
  Whether content of this type should be deleted when the author of it is deleted from the system.
  """
  deleteWithUser: Boolean

  """Description of the content type."""
  description: String

  """
  Whether to exclude nodes of this content type from front end search results.
  """
  excludeFromSearch: Boolean

  """The plural name of the content type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the content type within the GraphQL Schema."""
  graphqlSingleName: String

  """
  Whether this content type should have archives. Content archives are generated by type and by date.
  """
  hasArchive: Boolean

  """Whether the content type is hierarchical, for example pages."""
  hierarchical: Boolean

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether this page is set to the blog posts page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """Display name of the content type."""
  label: String

  """Details about the content type labels."""
  labels: WpPostTypeLabelDetails

  """The name of the icon file to display as a menu icon."""
  menuIcon: String

  """
  The position of this post type in the menu. Only applies if show_in_menu is true.
  """
  menuPosition: Int

  """
  The internal name of the post type. This should not be used for display purposes.
  """
  name: String

  """
  Whether a content type is intended for use publicly either via the admin
  interface or by front-end users. While the default settings of
  exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are
  inherited from public, each does not rely on this relationship and controls a
  very specific intention.
  """
  public: Boolean

  """
  Whether queries can be performed on the front end for the content type as part of parse_request().
  """
  publiclyQueryable: Boolean

  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """Makes this content type available via the admin bar."""
  showInAdminBar: Boolean

  """Whether to add the content type to the GraphQL Schema."""
  showInGraphql: Boolean

  """
  Where to show the content type in the admin menu. To work, $show_ui must be
  true. If true, the post type is shown in its own top level menu. If false, no
  menu is shown. If a string of an existing top level menu (eg.
  &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type
  will be placed as a sub-menu of that.
  """
  showInMenu: Boolean

  """Makes this content type available for selection in navigation menus."""
  showInNavMenus: Boolean

  """
  Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing this content type in the admin.
  """
  showUi: Boolean

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the ContentType type and the Taxonomy type"""
type WpContentTypeToTaxonomyConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpTaxonomy]
}

"""A taxonomy object"""
type WpTaxonomy implements Node & WpNode @dontInfer {
  """
  The url path of the first page of the archive page for this content type.
  """
  archivePath: String

  """List of Content Types associated with the Taxonomy"""
  connectedContentTypes: WpTaxonomyToContentTypeConnection

  """
  Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description
  """
  description: String

  """The plural name of the post type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the post type within the GraphQL Schema."""
  graphqlSingleName: String

  """Whether the taxonomy is hierarchical"""
  hierarchical: Boolean

  """Name of the taxonomy shown in the menu. Usually plural."""
  label: String

  """
  The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label
  """
  name: String

  """Whether the taxonomy is publicly queryable"""
  public: Boolean

  """
  Name of content type to diplay in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """
  Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud
  """
  showCloud: Boolean

  """
  Whether to display a column for the taxonomy on its post type listing screens.
  """
  showInAdminColumn: Boolean

  """Whether to add the post type to the GraphQL Schema."""
  showInGraphql: Boolean

  """Whether to show the taxonomy in the admin menu"""
  showInMenu: Boolean

  """Whether the taxonomy is available for selection in navigation menus."""
  showInNavMenus: Boolean

  """Whether to show the taxonomy in the quick/bulk edit panel."""
  showInQuickEdit: Boolean

  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing terms in this taxonomy in the admin
  """
  showUi: Boolean
  nodeType: String
}

"""Connection between the Taxonomy type and the ContentType type"""
type WpTaxonomyToContentTypeConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentType]
}

"""Connection between the ContentType type and the ContentNode type"""
type WpContentTypeToContentNodeConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode]
}

"""Details for labels of the PostType"""
type WpPostTypeLabelDetails {
  """Default is ‘Add New’ for both hierarchical and non-hierarchical types."""
  addNew: String

  """Label for adding a new singular item."""
  addNewItem: String

  """Label to signify all items in a submenu link."""
  allItems: String

  """Label for archives in nav menus"""
  archives: String

  """Label for the attributes meta box."""
  attributes: String

  """Label for editing a singular item."""
  editItem: String

  """Label for the Featured Image meta box title."""
  featuredImage: String

  """Label for the table views hidden heading."""
  filterItemsList: String

  """Label for the media frame button."""
  insertIntoItem: String

  """Label for the table hidden heading."""
  itemsList: String

  """Label for the table pagination hidden heading."""
  itemsListNavigation: String

  """Label for the menu name."""
  menuName: String

  """General name for the post type, usually plural."""
  name: String

  """Label for the new item page title."""
  newItem: String

  """Label used when no items are found."""
  notFound: String

  """Label used when no items are in the trash."""
  notFoundInTrash: String

  """Label used to prefix parents of hierarchical items."""
  parentItemColon: String

  """Label for removing the featured image."""
  removeFeaturedImage: String

  """Label for searching plural items."""
  searchItems: String

  """Label for setting the featured image."""
  setFeaturedImage: String

  """Name for one object of this post type."""
  singularName: String

  """Label for the media frame filter."""
  uploadedToThisItem: String

  """Label in the media frame for using a featured image."""
  useFeaturedImage: String

  """Label for viewing a singular item."""
  viewItem: String

  """Label for viewing post type archives."""
  viewItems: String
}

"""Connection between the ContentNode type and the User type"""
type WpContentNodeToEditLockConnectionEdge {
  """The timestamp for when the node was last edited"""
  lockTimestamp: String

  """The node of the connection, without the edges"""
  node: WpUser
}

interface WpCommenter @isPlaceholder {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: WpAvatar

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The email address of the author of a comment."""
  email: String

  """The globally unique identifier for the comment author."""
  id: ID!

  """The name of the author of a comment."""
  name: String

  """The url of the author of a comment."""
  url: String
}

interface WpDatabaseIdentifier @isPlaceholder {
  """The unique identifier stored in the database"""
  databaseId: Int!
}

"""A User object"""
type WpUser implements Node & WpNode & WpUniformResourceIdentifiable & WpCommenter & WpDatabaseIdentifier @dontInfer {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: WpAvatar

  """
  User metadata option name. Usually it will be &quot;wp_capabilities&quot;.
  """
  capKey: String

  """A list of capabilities (permissions) granted to the user"""
  capabilities: [String]

  """Connection between the User type and the Comment type"""
  comments: WpUserToCommentConnection

  """Identifies the primary key from the database."""
  databaseId: Int!

  """Description of the user."""
  description: String

  """
  Email address of the user. This is equivalent to the WP_User-&gt;user_email property.
  """
  email: String

  """
  A complete list of capabilities including capabilities inherited from a role.
  This is equivalent to the array keys of WP_User-&gt;allcaps.
  """
  extraCapabilities: [String]

  """
  First name of the user. This is equivalent to the WP_User-&gt;user_first_name property.
  """
  firstName: String

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """
  Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property.
  """
  lastName: String

  """
  The preferred language locale set for the user. Value derived from get_user_locale().
  """
  locale: String

  """
  Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property.
  """
  name: String

  """
  The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  nicename: String

  """Nickname of the user."""
  nickname: String

  """Connection between the User type and the page type"""
  pages: WpUserToPageConnection

  """Connection between the User type and the post type"""
  posts: WpUserToPostConnection

  """
  The date the user registered or was created. The field follows a full ISO8601 date string format.
  """
  registeredDate: String

  """Connection between the User type and the UserRole type"""
  roles: WpUserToUserRoleConnection

  """
  The slug for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  slug: String

  """The unique resource identifier path"""
  uri: String

  """A website url that is associated with the user."""
  url: String

  """
  Username for the user. This field is equivalent to WP_User-&gt;user_login.
  """
  username: String
  nodeType: String
}

"""
Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from.
"""
type WpAvatar {
  """
  URL for the default image or a default type. Accepts &#039;404&#039; (return a
  404 instead of a default image), &#039;retro&#039; (8bit),
  &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face),
  &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;,
  &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039;
  (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo).
  """
  default: String

  """HTML attributes to insert in the IMG element. Is not sanitized."""
  extraAttr: String

  """Whether to always show the default image, never the Gravatar."""
  forceDefault: Boolean

  """Whether the avatar was successfully found."""
  foundAvatar: Boolean

  """Height of the avatar image."""
  height: Int

  """
  What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;,
  &#039;R&#039;, &#039;X&#039;, and are judged in that order.
  """
  rating: String

  """Type of url scheme to use. Typically HTTP vs. HTTPS."""
  scheme: String

  """
  The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image.
  """
  size: Int

  """URL for the gravatar image source."""
  url: String

  """Width of the avatar image."""
  width: Int
}

"""Connection between the User type and the Comment type"""
type WpUserToCommentConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment]
}

"""A Comment object"""
type WpComment implements Node & WpNode & WpDatabaseIdentifier @dontInfer {
  """
  User agent used to post the comment. This field is equivalent to
  WP_Comment-&gt;comment_agent and the value matching the
  &quot;comment_agent&quot; column in SQL.
  """
  agent: String

  """
  The approval status of the comment. This field is equivalent to
  WP_Comment-&gt;comment_approved and the value matching the
  &quot;comment_approved&quot; column in SQL.
  """
  approved: Boolean

  """The author of the comment"""
  author: WpCommentToCommenterConnectionEdge

  """
  IP address for the author. This field is equivalent to
  WP_Comment-&gt;comment_author_IP and the value matching the
  &quot;comment_author_IP&quot; column in SQL.
  """
  authorIp: String

  """Connection between the Comment type and the ContentNode type"""
  commentedOn: WpCommentToContentNodeConnectionEdge

  """
  Content of the comment. This field is equivalent to
  WP_Comment-&gt;comment_content and the value matching the
  &quot;comment_content&quot; column in SQL.
  """
  content: String

  """The unique identifier stored in the database"""
  databaseId: Int!

  """
  Date the comment was posted in local time. This field is equivalent to
  WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
  """
  date: Date @dateformat

  """
  Date the comment was posted in GMT. This field is equivalent to
  WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL.
  """
  dateGmt: Date @dateformat

  """
  Karma value for the comment. This field is equivalent to
  WP_Comment-&gt;comment_karma and the value matching the
  &quot;comment_karma&quot; column in SQL.
  """
  karma: Int

  """Connection between the Comment type and the Comment type"""
  wpParent: WpCommentToParentCommentConnectionEdge

  """
  The database id of the parent comment node or null if it is the root comment
  """
  parentDatabaseId: Int

  """The globally unique identifier of the parent comment node."""
  parentId: ID

  """Connection between the Comment type and the Comment type"""
  replies: WpCommentToCommentConnection

  """
  Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and
  the value matching the &quot;comment_type&quot; column in SQL.
  """
  type: String
  nodeType: String
}

"""Connection between the Comment type and the Commenter type"""
type WpCommentToCommenterConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpCommenter
}

"""Connection between the Comment type and the ContentNode type"""
type WpCommentToContentNodeConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpContentNode
}

"""Connection between the Comment type and the Comment type"""
type WpCommentToParentCommentConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpComment
}

"""Connection between the Comment type and the Comment type"""
type WpCommentToCommentConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment]
}

interface WpNodeWithTemplate @isPlaceholder {
  """The template assigned to the node"""
  template: WpContentTemplate
}

interface WpNodeWithTitle @isPlaceholder {
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String
}

interface WpNodeWithAuthor @isPlaceholder {
  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID
}

interface WpNodeWithComments @isPlaceholder {
  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String
}

interface WpHierarchicalContentNode @isPlaceholder {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnection

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnection

  """The parent of the node. The parent object can be of various types"""
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID
}

"""The mediaItem type"""
type WpMediaItem implements Node & WpNode & WpContentNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpNodeWithTemplate & WpNodeWithTitle & WpNodeWithAuthor & WpNodeWithComments & WpHierarchicalContentNode & RemoteFile @dontInfer {
  """Alternative text to display when resource is not displayed"""
  altText: String

  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnection

  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """The caption for the resource"""
  caption: String

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the mediaItem type and the Comment type"""
  comments: WpMediaItemToCommentConnection

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """Description of the image (stored as post_content)"""
  description: String

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """The filesize in bytes of the resource"""
  fileSize: Int

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """Details about the mediaItem"""
  mediaDetails: WpMediaDetails

  """Url of the mediaItem"""
  mediaItemUrl: String

  """Type of resource"""
  mediaType: String

  """The mime type of the mediaItem"""
  mimeType: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """The parent of the node. The parent object can be of various types"""
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """The sizes attribute value for an image."""
  sizes: String

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """Url of the mediaItem"""
  sourceUrl: String

  """
  The srcset attribute specifies the URL of the image to use in different
  situations. It is a comma separated string of urls and their widths.
  """
  srcSet: String

  """The current status of the object"""
  status: String

  """The template assigned to the node"""
  template: WpContentTemplate

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String

  """The unique resource identifier path"""
  uri: String
  nodeType: String
  remoteFile: File @deprecated(reason: "MediaItem.remoteFile was renamed to localFile")
  localFile: File @link(from: "localFile.id", by: "id")
}

interface WpContentTemplate {
  """The name of the template"""
  templateName: String
}

"""Connection between the NodeWithAuthor type and the User type"""
type WpNodeWithAuthorToUserConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpUser
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type WpHierarchicalContentNodeToContentNodeAncestorsConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode]
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type WpHierarchicalContentNodeToContentNodeChildrenConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode]
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type WpHierarchicalContentNodeToParentContentNodeConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpContentNode
}

"""Connection between the mediaItem type and the Comment type"""
type WpMediaItemToCommentConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment]
}

"""Connection between the ContentNode type and the User type"""
type WpContentNodeToEditLastConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpUser
}

"""File details for a Media Item"""
type WpMediaDetails {
  """The filename of the mediaItem"""
  file: String

  """The height of the mediaItem"""
  height: Int

  """Meta information associated with the mediaItem"""
  meta: WpMediaItemMeta

  """The available sizes of the mediaItem"""
  sizes: [WpMediaSize]

  """The width of the mediaItem"""
  width: Int
}

"""Meta connected to a MediaItem"""
type WpMediaItemMeta {
  """Aperture measurement of the media item."""
  aperture: Float

  """Information about the camera used to create the media item."""
  camera: String

  """The text string description associated with the media item."""
  caption: String

  """Copyright information associated with the media item."""
  copyright: String

  """The date/time when the media was created."""
  createdTimestamp: Int

  """The original creator of the media item."""
  credit: String

  """The focal length value of the media item."""
  focalLength: Float

  """
  The ISO (International Organization for Standardization) value of the media item.
  """
  iso: Int

  """List of keywords used to describe or identfy the media item."""
  keywords: [String]

  """The vertical or horizontal aspect of the media item."""
  orientation: String

  """The shutter speed information of the media item."""
  shutterSpeed: Float

  """A useful title for the media item."""
  title: String
}

"""Details of an available size for a media item"""
type WpMediaSize {
  """The filename of the referenced size"""
  file: String

  """The filesize of the resource"""
  fileSize: Int

  """The height of the referenced size"""
  height: String

  """The mime type of the referenced size"""
  mimeType: String

  """The referenced size name"""
  name: String

  """The url of the referenced size"""
  sourceUrl: String

  """The width of the referenced size"""
  width: String
}

"""Connection between the User type and the page type"""
type WpUserToPageConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpPage]
}

interface WpNodeWithContentEditor @isPlaceholder {
  """The content of the post."""
  content: String
}

interface WpNodeWithFeaturedImage @isPlaceholder {
  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """The unique resource identifier path"""
  uri: String
}

interface WpNodeWithRevisions @isPlaceholder {
  """True if the node is a revision of another node"""
  isRevision: Boolean
}

interface WpNodeWithPageAttributes @isPlaceholder {
  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int
}

interface WpMenuItemLinkable @isPlaceholder {
  """The unique resource identifier path"""
  databaseId: Int!

  """The unique resource identifier path"""
  id: ID!

  """The unique resource identifier path"""
  uri: String
}

"""The page type"""
type WpPage implements Node & WpNode & WpContentNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpNodeWithTemplate & WpNodeWithTitle & WpNodeWithContentEditor & WpNodeWithAuthor & WpNodeWithFeaturedImage & WpNodeWithComments & WpNodeWithRevisions & WpNodeWithPageAttributes & WpHierarchicalContentNode & WpMenuItemLinkable @dontInfer {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnection

  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the page type and the Comment type"""
  comments: WpPageToCommentConnection

  """The content of the post."""
  content: String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique resource identifier path"""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether this page is set to the blog posts page."""
  isPostsPage: Boolean!

  """Whether this page is set to the privacy page."""
  isPrivacyPage: Boolean!

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """The parent of the node. The parent object can be of various types"""
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""
Connection between the NodeWithFeaturedImage type and the MediaItem type
"""
type WpNodeWithFeaturedImageToMediaItemConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpMediaItem
}

"""Connection between the NodeWithRevisions type and the ContentNode type"""
type WpNodeWithRevisionsToContentNodeConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpContentNode
}

"""Connection between the page type and the Comment type"""
type WpPageToCommentConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment]
}

"""Connection between the User type and the post type"""
type WpUserToPostConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost]
}

interface WpNodeWithExcerpt @isPlaceholder {
  """The excerpt of the post."""
  excerpt: String
}

interface WpNodeWithTrackbacks @isPlaceholder {
  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The post type"""
type WpPost implements Node & WpNode & WpContentNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpNodeWithTemplate & WpNodeWithTitle & WpNodeWithContentEditor & WpNodeWithAuthor & WpNodeWithFeaturedImage & WpNodeWithExcerpt & WpNodeWithComments & WpNodeWithTrackbacks & WpNodeWithRevisions & WpMenuItemLinkable @dontInfer {
  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """Connection between the post type and the category type"""
  categories: WpPostToCategoryConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the post type and the Comment type"""
  comments: WpPostToCommentConnection

  """The content of the post."""
  content: String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique resource identifier path"""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """The excerpt of the post."""
  excerpt: String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """Whether this page is sticky"""
  isSticky: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Connection between the post type and the postFormat type"""
  postFormats: WpPostToPostFormatConnection

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """Connection between the post type and the tag type"""
  tags: WpPostToTagConnection

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """Connection between the post type and the TermNode type"""
  terms: WpPostToTermNodeConnection

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String

  """URLs queued to be pinged."""
  toPing: [String]

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the post type and the category type"""
type WpPostToCategoryConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpCategory]
}

interface WpTermNode implements Node @isPlaceholder {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

interface WpHierarchicalTermNode @isPlaceholder {
  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID
}

"""The category type"""
type WpCategory implements Node & WpNode & WpTermNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpHierarchicalTermNode & WpMenuItemLinkable @dontInfer {
  """
  The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpCategoryToAncestorsCategoryConnection

  """Connection between the category type and the category type"""
  wpChildren: WpCategoryToCategoryConnection

  """Connection between the category type and the ContentNode type"""
  contentNodes: WpCategoryToContentNodeConnection

  """The number of objects connected to the object"""
  count: Int

  """The unique resource identifier path"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """
  Added to the GraphQL Schema because the ACF Field Group &quot;Icon&quot; was set to Show in GraphQL.
  """
  icat: WpCategory_Icat

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Connection between the category type and the category type"""
  wpParent: WpCategoryToParentCategoryConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """Connection between the category type and the post type"""
  posts: WpCategoryToPostConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the category type and the Taxonomy type"""
  taxonomy: WpCategoryToTaxonomyConnectionEdge

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the category type and the category type"""
type WpCategoryToAncestorsCategoryConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpCategory]
}

"""Connection between the category type and the category type"""
type WpCategoryToCategoryConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpCategory]
}

"""Connection between the category type and the ContentNode type"""
type WpCategoryToContentNodeConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode]
}

interface WpAcfFieldGroup @isPlaceholder {
  """The name of the ACF Field Group"""
  fieldGroupName: String
}

"""Field Group"""
type WpCategory_Icat implements WpAcfFieldGroup {
  caticon: WpMediaItem

  """The name of the ACF Field Group"""
  fieldGroupName: String
}

"""Connection between the category type and the category type"""
type WpCategoryToParentCategoryConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpCategory
}

"""Connection between the category type and the post type"""
type WpCategoryToPostConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost]
}

"""Connection between the category type and the Taxonomy type"""
type WpCategoryToTaxonomyConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpTaxonomy
}

"""Connection between the post type and the Comment type"""
type WpPostToCommentConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment]
}

"""Connection between the post type and the postFormat type"""
type WpPostToPostFormatConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpPostFormat]
}

"""The postFormat type"""
type WpPostFormat implements Node & WpNode & WpTermNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier @dontInfer {
  """Connection between the postFormat type and the ContentNode type"""
  contentNodes: WpPostFormatToContentNodeConnection

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Connection between the postFormat type and the post type"""
  posts: WpPostFormatToPostConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the postFormat type and the Taxonomy type"""
  taxonomy: WpPostFormatToTaxonomyConnectionEdge

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the postFormat type and the ContentNode type"""
type WpPostFormatToContentNodeConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode]
}

"""Connection between the postFormat type and the post type"""
type WpPostFormatToPostConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost]
}

"""Connection between the postFormat type and the Taxonomy type"""
type WpPostFormatToTaxonomyConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpTaxonomy
}

"""Connection between the post type and the tag type"""
type WpPostToTagConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpTag]
}

"""The tag type"""
type WpTag implements Node & WpNode & WpTermNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpMenuItemLinkable @dontInfer {
  """Connection between the tag type and the ContentNode type"""
  contentNodes: WpTagToContentNodeConnection

  """The number of objects connected to the object"""
  count: Int

  """The unique resource identifier path"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Connection between the tag type and the post type"""
  posts: WpTagToPostConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the tag type and the Taxonomy type"""
  taxonomy: WpTagToTaxonomyConnectionEdge

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the tag type and the ContentNode type"""
type WpTagToContentNodeConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode]
}

"""Connection between the tag type and the post type"""
type WpTagToPostConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost]
}

"""Connection between the tag type and the Taxonomy type"""
type WpTagToTaxonomyConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpTaxonomy
}

"""Connection between the post type and the TermNode type"""
type WpPostToTermNodeConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpTermNode]
}

"""Connection between the User type and the UserRole type"""
type WpUserToUserRoleConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpUserRole]
}

"""A user role object"""
type WpUserRole implements Node & WpNode @dontInfer {
  """The capabilities that belong to this role"""
  capabilities: [String]

  """The display name of the role"""
  displayName: String

  """The registered name of the role"""
  name: String
  nodeType: String
}

"""All of the registered settings"""
type WpSettings {
  """Settings of the the string Settings Group"""
  discussionSettingsDefaultCommentStatus: String

  """Settings of the the string Settings Group"""
  discussionSettingsDefaultPingStatus: String

  """Settings of the the string Settings Group"""
  generalSettingsDateFormat: String

  """Settings of the the string Settings Group"""
  generalSettingsDescription: String

  """Settings of the the string Settings Group"""
  generalSettingsEmail: String

  """Settings of the the string Settings Group"""
  generalSettingsLanguage: String

  """Settings of the the integer Settings Group"""
  generalSettingsStartOfWeek: Int

  """Settings of the the string Settings Group"""
  generalSettingsTimeFormat: String

  """Settings of the the string Settings Group"""
  generalSettingsTimezone: String

  """Settings of the the string Settings Group"""
  generalSettingsTitle: String

  """Settings of the the string Settings Group"""
  generalSettingsUrl: String

  """Settings of the the integer Settings Group"""
  readingSettingsPageForPosts: Int

  """Settings of the the integer Settings Group"""
  readingSettingsPageOnFront: Int

  """Settings of the the integer Settings Group"""
  readingSettingsPostsPerPage: Int

  """Settings of the the string Settings Group"""
  readingSettingsShowOnFront: String

  """Settings of the the integer Settings Group"""
  writingSettingsDefaultCategory: Int

  """Settings of the the string Settings Group"""
  writingSettingsDefaultPostFormat: String

  """Settings of the the boolean Settings Group"""
  writingSettingsUseSmilies: Boolean
}

"""The discussion setting type"""
type WpDiscussionSettings {
  """Разрешить оставлять комментарии к новым записям."""
  defaultCommentStatus: String

  """
  Разрешить ссылки оповещения с других блогов (уведомления и обратные ссылки) на новые статьи.
  """
  defaultPingStatus: String
}

"""The general setting type"""
type WpGeneralSettings {
  """Общий формат даты."""
  dateFormat: String

  """Слоган сайта."""
  description: String

  """
  Этот адрес используется в целях администрирования. Например, для уведомления о новых пользователях.
  """
  email: String

  """Код локали WordPress."""
  language: String

  """Первый день недели."""
  startOfWeek: Int

  """Общий формат времени."""
  timeFormat: String

  """Город в той же временной зоне что и у вас."""
  timezone: String

  """Название сайта."""
  title: String

  """Адрес сайта (URL)"""
  url: String
}

"""
Menus are the containers for navigation items. Menus can be assigned to menu
locations, which are typically registered by the active theme.
"""
type WpMenu implements Node & WpNode & WpDatabaseIdentifier @dontInfer {
  """The number of items in the menu"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The locations a menu is assigned to"""
  locations: [WpMenuLocationEnum]

  """Connection between the Menu type and the MenuItem type"""
  menuItems: WpMenuToMenuItemConnection

  """Display name of the menu. Equivalent to WP_Term-&gt;name."""
  name: String

  """The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"""
  slug: String
  nodeType: String
}

"""Registered menu locations"""
enum WpMenuLocationEnum {
  GATSBY_FOOTER_MENU
  GATSBY_HEADER_MENU
  MENU_1
}

"""Connection between the Menu type and the MenuItem type"""
type WpMenuToMenuItemConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpMenuItem]
}

"""
Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu.
"""
type WpMenuItem implements Node & WpNode & WpDatabaseIdentifier @dontInfer {
  """Connection between the MenuItem type and the MenuItem type"""
  childItems: WpMenuItemToMenuItemConnection

  """Connection from MenuItem to it&#039;s connected node"""
  connectedNode: WpMenuItemToMenuItemLinkableConnectionEdge

  """Class attribute for the menu item link"""
  cssClasses: [String]

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Description of the menu item."""
  description: String

  """Label or title of the menu item."""
  label: String

  """Link relationship (XFN) of the menu item."""
  linkRelationship: String

  """The locations the menu item&#039;s Menu is assigned to"""
  locations: [WpMenuLocationEnum]

  """The Menu a MenuItem is part of"""
  menu: WpMenuItemToMenuConnectionEdge

  """Menu item order"""
  order: Int

  """The database id of the parent menu item or null if it is the root"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent nav menu item object."""
  parentId: ID

  """
  Path for the resource. Relative path for internal resources. Absolute path for external resources.
  """
  path: String

  """Target attribute for the menu item link."""
  target: String

  """Title attribute for the menu item link"""
  title: String

  """The uri of the resource the menu item links to"""
  uri: String

  """URL or destination of the menu item."""
  url: String
  nodeType: String
}

"""Connection between the MenuItem type and the MenuItem type"""
type WpMenuItemToMenuItemConnection {
  """The nodes of the connection, without the edges"""
  nodes: [WpMenuItem]
}

"""Connection between the MenuItem type and the MenuItemLinkable type"""
type WpMenuItemToMenuItemLinkableConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpMenuItemLinkable
}

"""Connection between the MenuItem type and the Menu type"""
type WpMenuItemToMenuConnectionEdge {
  """The node of the connection, without the edges"""
  node: WpMenu
}

"""The reading setting type"""
type WpReadingSettings {
  """ID страницы, на которой должны отображаться последние записи"""
  pageForPosts: Int

  """ID страницы, которая должна отображаться на главной странице"""
  pageOnFront: Int

  """Максимум страниц блога для показа."""
  postsPerPage: Int

  """Что показать на главной странице"""
  showOnFront: String
}

"""Information needed by gatsby-source-wordpress."""
type WpWPGatsby {
  """Returns wether or not pretty permalinks are enabled."""
  arePrettyPermalinksEnabled: Boolean

  """Wether or not the Preview frontend URL is online."""
  isPreviewFrontendOnline: Boolean
}

"""The writing setting type"""
type WpWritingSettings {
  """Рубрика для записей по умолчанию."""
  defaultCategory: Int

  """Формат записей по умолчанию."""
  defaultPostFormat: String

  """Преобразовывать смайлики наподобие :-) и :-P в картинки при показе."""
  useSmilies: Boolean
}

"""A Comment Author object"""
type WpCommentAuthor implements Node & WpNode & WpCommenter @dontInfer {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: WpAvatar

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The email for the comment author"""
  email: String

  """The name for the comment author."""
  name: String

  """The url the comment author."""
  url: String
  nodeType: String
}

"""The template assigned to the node"""
type WpDefaultTemplate implements WpContentTemplate {
  """The name of the template"""
  templateName: String
}

"""Non-node WPGraphQL root fields."""
type Wp implements Node @dontInfer {
  """Entry point to get all settings for the site"""
  allSettings: WpSettings

  """Fields of the &#039;DiscussionSettings&#039; settings group"""
  discussionSettings: WpDiscussionSettings

  """Fields of the &#039;GeneralSettings&#039; settings group"""
  generalSettings: WpGeneralSettings

  """Fields of the &#039;ReadingSettings&#039; settings group"""
  readingSettings: WpReadingSettings

  """
  Returns an MD5 hash of the schema, useful in determining if the schema has changed.
  """
  schemaMd5: String

  """Returns the current user"""
  viewer: WpUser

  """Information needed by gatsby-source-wordpress."""
  wpGatsby: WpWPGatsby

  """Fields of the &#039;WritingSettings&#039; settings group"""
  writingSettings: WpWritingSettings
  nodeType: String
}

type WordpressMenuLocation implements Node @derivedTypes @dontInfer {
  slug: String
  menu: WordpressMenuLocationMenu
  menuData: WordpressMenuLocationMenuData
  language: String
}

type WordpressMenuLocationMenu {
  term_id: Int
  name: String
  slug: String
  term_group: Int
  term_taxonomy_id: Int
  taxonomy: String
  description: String
  parent: Int
  count: Int
  filter: String
}

type WordpressMenuLocationMenuData @derivedTypes {
  term_id: Int
  name: String
  slug: String
  term_group: Int
  term_taxonomy_id: Int
  taxonomy: String
  description: String
  parent: Int
  count: Int
  filter: String
  items: [WordpressMenuLocationMenuDataItems]
}

type WordpressMenuLocationMenuDataItems {
  ID: Int
  post_author: String
  post_date: Date @dateformat
  post_date_gmt: Date @dateformat
  post_content: String
  post_title: String
  post_excerpt: String
  post_status: String
  comment_status: String
  ping_status: String
  post_password: String
  post_name: String
  to_ping: String
  pinged: String
  post_modified: Date @dateformat
  post_modified_gmt: Date @dateformat
  post_content_filtered: String
  post_parent: Int
  guid: String
  menu_order: Int
  post_type: String
  post_mime_type: String
  comment_count: String
  filter: String
  db_id: Int
  menu_item_parent: String
  object_id: String
  object: String
  type: String
  type_label: String
  url: String
  title: String
  target: String
  attr_title: String
  description: String
  classes: [String]
  xfn: String
  slug: String
}